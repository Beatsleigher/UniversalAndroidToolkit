/*
 * Copyright (C) 2014 beatsleigher
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package eu.m4gkbeatz.androidtoolkit.ui;

import JDroidLib.android.controllers.ADBController;

import eu.m4gkbeatz.androidtoolkit.logging.LogLevel;
import eu.m4gkbeatz.androidtoolkit.logging.Logger;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;

/**
 * This class only has one purpose: To display connected devices and return values.
 * @author beatsleigher
 */
public class AdvancedDevices extends javax.swing.JFrame {
    
    //<editor-fold defaultstate="collapsed" desc="Variables and constructor. Nothing pretty here!">
    ADBController adbController = null;
    Logger log = null;

    /**
     * Creates new form AdvancedDevices
     * @param adbController
     */
    public AdvancedDevices(ADBController adbController, Logger log) {
        initComponents();
        this.adbController = adbController;
        this.log = log;
    }
    //</editor-fold>
    
    /**
     * Gets all devices connected to computer via ADB and fastboot and displays them in lists.
     */
    public void loadDevices() {
        log.log(LogLevel.INFO, "Loading connecting devices...");
        this.setIconImage(new ImageIcon(this.getClass().getResource("/eu/m4gkbeatz/androidtoolkit/resources/device-icon.png")).getImage());
        try {
            List<String> adbDevices = new ArrayList(), fastbootDevices = new ArrayList();
            ////////////////////
            // Get connected devices
            ////////////////////
            adbDevices = adbController.getConnectedDevices();
            fastbootDevices = adbController.getConnectedFastbootDevices();
            
            ////////////////////
            // Loop through lists
            ////////////////////
            DefaultListModel model = new DefaultListModel();
            /*ADB first!*/
            for (int i = 0; i < adbDevices.size(); i++) {
                log.log(LogLevel.FINE, "Found (ADB) device " + adbDevices.get(i));
                String[] arr = adbDevices.get(i).split("\t");
                model.addElement(arr[0]);
            }
            jList1.setModel(model);
            /*Now fastboot*/
            model = new DefaultListModel();
            for (int i = 0; i < fastbootDevices.size(); i++) {
                log.log(LogLevel.FINE, "Found (fastboot) device " + fastbootDevices.get(i));
                String[] arr = fastbootDevices.get(i).split("\t");
                model.addElement(arr[0]);
            }
            jList2.setModel(model);
            model = null;
            
            ////////////////////
            // Select first device
            ////////////////////
            jList1.setSelectedIndex(0);
            jList2.setSelectedIndex(0);
        } catch (IOException ex) {
            log.log(LogLevel.SEVERE, "ERROR: Error while loading devices!\n" + ex.toString());
        }
    }
    
    /**
     * Gets the currently selected connected device.
     * @return the serial of that device.
     */
    public Object getSelectedADBDevice() { return jList1.getSelectedValue(); }
    
    /**
     * Gets the currently selected connected device.
     * @return the device's serial.
     */
    public Object getSelectedFastbootDevice() { return jList2.getSelectedValue(); }

    //<editor-fold defaultstate="collapsed" desc="Variables and other crap that nobody needs to see.">
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Connected Devices | Universal Android Toolkit");
        setPreferredSize(new java.awt.Dimension(550, 330));

        jList1.setPreferredSize(new java.awt.Dimension(50, 110));
        jScrollPane1.setViewportView(jList1);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Devices Connected via ADB");

        jList2.setPreferredSize(new java.awt.Dimension(50, 110));
        jScrollPane2.setViewportView(jList2);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Devices Connected via Fastboot");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>
}
