/*
 * Copyright (C) 2014 beatsleigher
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


package eu.m4gkbeatz.androidtoolkit.ui;

import JDroidLib.android.controllers.ADBController;

import eu.m4gkbeatz.androidtoolkit.logging.Logger;
import static eu.m4gkbeatz.androidtoolkit.logging.Logger.Level;
import eu.m4gkbeatz.androidtoolkit.language.LangFileParser;
import eu.m4gkbeatz.androidtoolkit.ui.context.TaskManagerContext;

import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;


/**
 *
 * @author beatsleigher
 */
public class MoreUI extends javax.swing.JFrame {

    private final Logger logger;
    private final LangFileParser parser;
    private final ADBController adbController;
    private final boolean debug;
    private final Devices deviceManager;
    private String selectedProcess = null;
    
    public MoreUI(Logger logger, LangFileParser parser, ADBController adbController, boolean debug, Devices deviceManager) {
        this.logger = logger;
        this.parser = parser;
        this.adbController = adbController;
        this.debug = debug;
        this.deviceManager = deviceManager;
        initComponents();
        this.setLocationRelativeTo(null);
        this.setIconImage(new ImageIcon(this.getClass().getResource("/eu/m4gkbeatz/androidtoolkit/resources/UniversalAndroidToolkit_logo.png")).getImage());
        // this.getContentPane().setBackground(new Color(107, 106, 104)); // Don't bother with this, but leave it here...
        getProcesses();
        jTable1.setComponentPopupMenu(new TaskManagerContext(deviceManager.getSelectedAndroidDevice(), adbController, debug, parser, logger, jTable1.getModel()));
        reloadButton.setSelected(true);
    }
    
    private void getProcesses() {
        if (deviceManager.getSelectedAndroidDevice() == null) {
            JOptionPane.showMessageDialog(null, parser.parse("moreUI:noDeviceMsg"), parser.parse("moreUI:noDeviceMsgTitle"), JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            BufferedReader reader = null;
            String output = adbController.executeADBCommand(true, false, deviceManager.getSelectedAndroidDevice(), new String[]{"ps"});
            String line = null;
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Set all cells to read-only
                }
            };
            
            reader = new BufferedReader(new StringReader(output));
            while ((line = reader.readLine()) != null) {
                if (line.toUpperCase().startsWith("USER")) {
                    String[] columns = line.split(" ");
                    for (String str : columns) {
                        if (!str.equals("")) {
                            str += "\t";
                            model.addColumn(str);
                        }
                    }
                    continue;
                }
                String[] row = line.split(" ");
                List<String> rowData = new ArrayList<>();
                for (String str : row)
                    if (!str.equals("") && !(str.equals("S") || str.equals("D")))
                        rowData.add(str);
                
                model.addRow(rowData.toArray());
            }
            reader.close();
            jTable1.setModel(model);
        } catch (IOException ex) {
            logger.log(Level.ERROR, "An error occurred while loading the processes from the Android device: " + deviceManager.getSelectedAndroidDevice().getSerial() + "\n"
                    + "The error stack trace will be printed to the console...");
            ex.printStackTrace(System.err);
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        reloadButton = new javax.swing.JToggleButton();
        killButton = new javax.swing.JButton();
        killAllButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(parser.parse("moreUI:title"));

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        reloadButton.setText(parser.parse("reloadButton"));
        reloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadButtonActionPerformed(evt);
            }
        });

        killButton.setText(parser.parse("killButton"));
        killButton.setEnabled(false);
        killButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                killButtonActionPerformed(evt);
            }
        });

        killAllButton.setText(parser.parse("killAllButton"));
        killAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                killAllButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(reloadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(killButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(killAllButton))
                    .addComponent(jSeparator1))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(killButton)
                    .addComponent(reloadButton)
                    .addComponent(killAllButton))
                .addContainerGap())
        );

        jTabbedPane1.addTab(parser.parse("moreUI:taskManagerTab"), jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void reloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadButtonActionPerformed
        new Thread() {
            @Override
            public void run() {
                setName("Reload Android Tasks Thread");
                while (reloadButton.isSelected()) {
                    logger.log(Level.DEBUG, "Refreshing processes...");
                    getProcesses();
                    try { Thread.sleep(10000); } catch (InterruptedException ex) { if (debug) logger.log(Level.DEBUG, "An error occurred while sleeping: " + getName() + ex.toString()); }
                }
            }
        }.start();
    }//GEN-LAST:event_reloadButtonActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (jTable1.getModel().getValueAt(jTable1.getSelectedRow(), jTable1.getSelectedColumn()) == null) {   
            killButton.setEnabled(false);
            return;
        } else
            killButton.setEnabled(true);
            
        logger.log(Level.DEBUG, "Selected Android process: " + jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 7));
        selectedProcess = jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 7).toString();
    }//GEN-LAST:event_jTable1MouseClicked

    private void killButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_killButtonActionPerformed
        try {
            logger.log(Level.INFO, "Killing process: " + selectedProcess);
            logger.log(Level.INFO, "ADB Output: " + adbController.executeADBCommand(true, false, deviceManager.getSelectedAndroidDevice(), new String[]{"am", "kill", selectedProcess}));
        } catch (IOException ex) {
            logger.log(Level.ERROR, "An error occurred while attempting to kill the selected process: " + ex.toString() + "\n"
                    + "The error stack trace will be printed to the console...");
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_killButtonActionPerformed

    private void killAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_killAllButtonActionPerformed
        try {
            logger.log(Level.INFO, "Killing all processes on device: " + deviceManager.getSelectedAndroidDevice().toString());
            logger.log(Level.INFO, "ADB Output: " + adbController.executeADBCommand(true, false, deviceManager.getSelectedAndroidDevice(), new String[]{"am", "kill-all"}));
        } catch (IOException ex) {
            logger.log(Level.ERROR, "An error occurred while attempting to kill all processes: " + ex.toString() + "\n"
                    + "The error stack trace will be printed to the console...");
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_killAllButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton killAllButton;
    private javax.swing.JButton killButton;
    private javax.swing.JToggleButton reloadButton;
    // End of variables declaration//GEN-END:variables
}
