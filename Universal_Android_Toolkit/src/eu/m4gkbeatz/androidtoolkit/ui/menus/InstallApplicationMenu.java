/*
 * Copyright (C) 2014 beatsleigher
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


package eu.m4gkbeatz.androidtoolkit.ui.menus;


import JDroidLib.android.controllers.*;
import JDroidLib.android.device.*;

import eu.m4gkbeatz.androidtoolkit.language.*;
import eu.m4gkbeatz.androidtoolkit.logging.*;
import eu.m4gkbeatz.androidtoolkit.settings.*;
import static eu.m4gkbeatz.androidtoolkit.logging.Logger.Level;

import java.io.*;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author beatsleigher
 */
public class InstallApplicationMenu extends javax.swing.JFrame {
    
    private Logger logger = null;
    private boolean debug = false;
    private ADBController adbController = null;
    private SettingsManager settings = null;
    private LangFileParser parser = null;
    private Device device = null;
    private String INSTALL_INT = "", INSTALL_INT_TT = "", INSTALL_SD = "", INSTALL_SD_TT = "";
    /*========== Installation Options ==========*/
    private boolean _forwardLock = false;
    private boolean _reinstall = false;
    private boolean _allowTestApps = false;
    private boolean installToInternal = true;
    private boolean installToSD = false;
    private boolean _allowDowngrade = false;

    /**
     * Creates new form InstallApplicationMenu
     * @param logger
     * @param debug
     * @param adbController
     * @param settings
     * @param parser
     * @param dev
     */
    public InstallApplicationMenu(Logger logger, boolean debug, ADBController adbController, SettingsManager settings, LangFileParser parser, Device dev) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setIconImage(new ImageIcon(this.getClass().getResource("/eu/m4gkbeatz/androidtoolkit/resources/UniversalAndroidToolkit_logo.png")).getImage());
        this.debug = debug;
        this.logger = logger;
        this.adbController = adbController;
        this.settings = settings;
        this.parser = parser;
        device = dev;
        try {
            loadTranslations();
        } catch (IOException ex) {
            logger.log(Level.ERROR, "Error occurred while loading translations for Application Installer: " + ex.toString() + "\n"
                    + "The error stack trace will be printed to the console...");
            ex.printStackTrace(System.err);
        }
    }
    
    private IOException exception = null; // Because Java's inner-class rules are fucking stupid...
    private void loadTranslations() throws IOException {
        new Thread() {
            @Override
            public void run() {
                try {
                    setTitle("Universal Android Toolkit | " + parser.parse("installApp:title"));
                    jButton2.setText(parser.parse("installApp:installButton"));
                } catch (IOException ex) {
                    exception = ex;
                }
                interrupt();
            }
        }.start();
        if (exception != null)
            throw exception;
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(174, 112));
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);

        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Install Application");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jButton2)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jTextField1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(12, 12, 12))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser apkChooser = new JFileChooser();
        try {
            apkChooser.setFileFilter(new APKFilter());
            apkChooser.setDialogTitle(parser.parse("installApp:chooserTitle"));
            apkChooser.setApproveButtonText(parser.parse("installApp_chooserAcceptButton"));
        } catch (IOException ex) {
            logger.log(Level.ERROR, "Error occurred while opening file chooser: " + ex.toString() + ".\n"
                    + "The error stack trace will be printed to the console...");
            ex.printStackTrace(System.err);
            return;
        }
        int result = apkChooser.showOpenDialog(null);
        if (result == JOptionPane.OK_OPTION)
            jTextField1.setText(apkChooser.getSelectedFile().getAbsolutePath());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        logger.log(Level.INFO, "=============== Downloading Application to Device " + device.toString() + " ===============");
        jProgressBar1.setIndeterminate(true);
        new Thread() {
            @Override
            public void run() {
                try {
                    logger.log(Level.INFO, "Application Installation Success: " + device.installApplication(jTextField1.getText()));
                    logger.log(Level.INFO, "===============/Downloading Application to Device " + device.toString() + "\\===============");
                    jProgressBar1.setIndeterminate(false);
                } catch (IOException | NullPointerException ex) {
                    logger.log(Level.ERROR, "An error occurred while attempting to install " + jTextField1.getText() + " to device (" + device.toString() + "): " + ex.toString() + "\n"
                            + "Error stack trace will be printed to console...");
                    ex.printStackTrace(System.err);
                }
                interrupt();
            }
        }.start();
    }//GEN-LAST:event_jButton2ActionPerformed

    private class APKFilter extends FileFilter {

        @Override
        public boolean accept(File f) {
            return f.isDirectory() || f.getAbsolutePath().toLowerCase().endsWith(".apk");
        }

        @Override
        public String getDescription() {
            try {
                return parser.parse("installApp:apkDescription");
            } catch (IOException ex) {
                logger.log(Level.ERROR, "Error while loading translation for description of file type!");
                ex.printStackTrace(System.err);
                return "Android Application Packages";
            }
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
