/*
 * Copyright (C) 2014 beatsleigher
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


package eu.m4gkbeatz.androidtoolkit.ui.menus;


import JDroidLib.android.controllers.*;
import JDroidLib.android.device.*;

import eu.m4gkbeatz.androidtoolkit.language.*;
import eu.m4gkbeatz.androidtoolkit.logging.*;
import eu.m4gkbeatz.androidtoolkit.settings.*;
import static eu.m4gkbeatz.androidtoolkit.logging.Logger.Level;

import java.awt.*;
import java.util.*;
import javax.swing.*;
import java.io.*;
import java.util.List;
import javax.swing.border.*;


/**
 *
 * @author beatsleigher
 */
public class UninstallApplicationMenu extends javax.swing.JFrame {

    private Logger logger = null;
    private boolean debug = false;
    private ADBController adbController = null;
    private SettingsManager settings = null;
    private LangFileParser parser = null;
    private Device device = null;
    private String CONFIRM_MSG = "";
    private String CONFIRM_MSG_TITLE = "";
        
    public UninstallApplicationMenu(Logger logger, boolean debug, ADBController adbController, SettingsManager settings, LangFileParser parser, Device device) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setIconImage(new ImageIcon(this.getClass().getResource("/eu/m4gkbeatz/androidtoolkit/resources/UniversalAndroidToolkit_logo.png")).getImage());
        this.logger = logger;
        this.debug = debug;
        this.adbController = adbController;
        this.settings = settings;
        this.parser = parser;
        this.device = device;
        try {
            loadTranslations();
        } catch (IOException ex) {
            logger.log(Level.ERROR, "An error occurred while loading the translations for UninstallApplicationMenu: " + ex.toString() + "\n"
                    + "The stack trace will be printed to the console...");
            ex.printStackTrace(System.err);
        }
        jList1.setCellRenderer(new ApplicationListCellRenderer());
        try {
            getApps();
        } catch (IOException ex) {
            logger.log(Level.ERROR, "An error occurred while loading the packages from the device (" + device.toString() + "). Is it still plugged in?\n"
                    + "The stack trace will be printed to the console...");
            ex.printStackTrace(System.err);
        }
    }
    
    private IOException exception = null;
    private void loadTranslations() throws IOException {
        new Thread() {
            @Override
            public void run() {
                try {
                    setTitle("Universal Android Toolkit | " + parser.parse("uninstallApp:title"));
                    selectPackage.setText(parser.parse("uninstallApp:selectAppLabel"));
                    removeApp.setText(parser.parse("uninstallApp:removeAppButton"));
                    CONFIRM_MSG = parser.parse("uninstallApp:confirmMsg");
                    CONFIRM_MSG_TITLE = parser.parse("uninstallApp:confirmMsgTitle");
                } catch (IOException ex) {
                    exception = ex;
                }
                interrupt();
            }
        }.start();
        if (exception != null)
            throw exception;
    }
    
    private void getApps() throws IOException {
        List<String> listOfApps = device.getPackageController().getPackages();
        DefaultListModel model = new DefaultListModel();
        for (String str : listOfApps) {
            String[] arr = str.split(":");
            model.addElement(arr[1]);
        }
        jList1.setModel(model);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectPackage = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        removeApp = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        selectPackage.setText("Select a package below...");

        jScrollPane1.setViewportView(jList1);

        removeApp.setText("Remove");
        removeApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAppActionPerformed(evt);
            }
        });

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eu/m4gkbeatz/androidtoolkit/resources/search/search_pointer.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(selectPackage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(12, 12, 12))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeApp)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectPackage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeApp)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removeAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAppActionPerformed
        try {
            int result = JOptionPane.showConfirmDialog(null, CONFIRM_MSG, CONFIRM_MSG_TITLE, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                logger.log(Level.INFO, "=============== Removing Application \"" + jList1.getSelectedValue() + "\" from device (" + device.toString() + ")! ===============");
                logger.log(Level.INFO, "ADB Output: " + device.getPackageController().uninstallApplication(false, jList1.getSelectedValue().toString()));
                logger.log(Level.INFO, "===============/Removing Application \"" + jList1.getSelectedValue() + "\" from device (" + device.toString() + ")!\\===============");
            }
        } catch (IOException ex) {
            logger.log(Level.ERROR, "An error occurred while removing the application from the device: " + ex.toString() + "\n"
                    + "The error stack trace will be printed to the console...");
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_removeAppActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        ListModel model = jList1.getModel();
        if (jTextField1.getText().length() > 5)
            for (int i = 0; i < model.getSize(); i++) 
                if (model.getElementAt(i).toString().contains(jTextField1.getText()))
                    jList1.setSelectedIndex(i);
    }//GEN-LAST:event_jTextField1KeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton removeApp;
    private javax.swing.JLabel selectPackage;
    // End of variables declaration//GEN-END:variables

    public class ApplicationListCellRenderer extends DefaultListCellRenderer {
        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            label.setIcon(new ImageIcon(this.getClass().getResource("/eu/m4gkbeatz/androidtoolkit/resources/device/ic_launcher_settings.png")));
            label.setHorizontalTextPosition(JLabel.RIGHT);
            return label;
        }
    }
    

}
