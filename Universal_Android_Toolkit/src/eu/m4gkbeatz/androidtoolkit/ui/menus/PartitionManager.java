/*
 * Copyright (C) 2014 beatsleigher
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


package eu.m4gkbeatz.androidtoolkit.ui.menus;

import JDroidLib.android.controllers.*;

import eu.m4gkbeatz.androidtoolkit.logging.Logger;
import static eu.m4gkbeatz.androidtoolkit.logging.Logger.Level;
import eu.m4gkbeatz.androidtoolkit.language.LangFileParser;

import java.awt.*;
import java.io.*;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;


/**
 *
 * @author beatsleigher
 */
public final class PartitionManager extends javax.swing.JFrame {
    
    private final ADBController adbController;
    private final boolean debug;
    private final Logger logger;
    private final LangFileParser parser;
    private final String serialNumber;
    private final boolean cleanFlash;

    public PartitionManager(ADBController adbController, boolean debug, Logger logger, LangFileParser parser, String serialNumber, boolean cleanFlash) {
        this.setLocationRelativeTo(null);
        this.setIconImage(new ImageIcon(this.getClass().getResource("/eu/m4gkbeatz/androidtoolkit/resources/UniversalAndroidToolkit_logo.png")).getImage());
        this.adbController = adbController;
        this.debug = debug;
        this.logger = logger;
        this.parser = parser;
        this.serialNumber = serialNumber; // Serial number of the device to flash/format, etc.
        this.cleanFlash = cleanFlash;
        if (cleanFlash)
            logger.log(Level.INFO, "Clean-Flash enabled!");
        initComponents();
        loadTranslations();
    }
    
    private void loadTranslations() {
        new Thread() {
            @Override
            public void run() {
                setTitle("Universal Android Toolkit | " + parser.parse("partitionManager:title"));
                warningLabel.setText(parser.parse("partitionManager:warningLabel"));
                selectPartitionLabel.setText(parser.parse("partitionManager:selectPartitionLabel"));
                formatPartitionsButton.setText(parser.parse("partitionManager:formatPartitionsButton"));
                warningLabel2.setText(parser.parse("partitionManager:warningLabel"));
                selectPartitionLabel2.setText(parser.parse("partitionManager:selectPartitionLabel2"));
                erasePartitionsButton.setText(parser.parse("partitionManager:erasePartitionsButton"));
                warningLabel3.setText(warningLabel2.getText());
                flashPartitionButton.setText(parser.parse("partitionManager:flashPartitionButton"));
            }
        }.start();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        warningLabel = new javax.swing.JLabel();
        selectPartitionLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        formatPartitionsButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        warningLabel2 = new javax.swing.JLabel();
        selectPartitionLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        erasePartitionsButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        warningLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList();
        jTextField1 = new javax.swing.JTextField();
        selectIMG = new javax.swing.JButton();
        flashPartitionButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        warningLabel.setForeground(new java.awt.Color(255, 0, 0));
        warningLabel.setText("Please note: This might render your device useless. Proceed with caution!");

        selectPartitionLabel.setText("Select a partition to format from below:");

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "system", "userdata", "boot", "recovery" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setCellRenderer(new PartitionCellRenderer());
        jScrollPane1.setViewportView(jList1);

        formatPartitionsButton.setText("jButton1");
        formatPartitionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatPartitionsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(formatPartitionsButton)
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(warningLabel)
                    .addComponent(selectPartitionLabel))
                .addGap(43, 43, 43))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(warningLabel)
                .addGap(18, 18, 18)
                .addComponent(selectPartitionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formatPartitionsButton)
                .addContainerGap())
        );

        jTabbedPane1.addTab(parser.parse("partitionManager:formatPartitionTab"), jPanel1);

        warningLabel2.setForeground(new java.awt.Color(255, 0, 0));
        warningLabel2.setText("Please note: This might render your device useless. Proceed with caution!");

        selectPartitionLabel2.setText("Select one or more partitions to erase below:");

        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "system", "userdata", "boot", "recovery" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList2.setCellRenderer(new PartitionCellRenderer());
        jScrollPane2.setViewportView(jList2);

        erasePartitionsButton.setText("jButton1");
        erasePartitionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                erasePartitionsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(erasePartitionsButton)
                    .addComponent(jScrollPane2))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(warningLabel2)
                    .addComponent(selectPartitionLabel2))
                .addGap(43, 43, 43))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(warningLabel2)
                .addGap(18, 18, 18)
                .addComponent(selectPartitionLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(erasePartitionsButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(parser.parse("partitionManager:erasePartitionTab"), jPanel2);

        warningLabel3.setForeground(new java.awt.Color(255, 0, 0));
        warningLabel3.setText("Please note: This might render your device useless. Proceed with caution!");

        jLabel1.setText("Please select the partiton and image (*.img) to flash:");

        jList3.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "system", "boot", "userdata", "recovery", "modem", "bootloader", "*custom" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList3.setCellRenderer(new PartitionCellRenderer());
        jList3.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList3ValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(jList3);

        selectIMG.setText("...");
        selectIMG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectIMGActionPerformed(evt);
            }
        });

        flashPartitionButton.setText("jButton2");
        flashPartitionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flashPartitionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectIMG)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(flashPartitionButton))
                    .addComponent(jScrollPane4))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(warningLabel3)
                    .addComponent(jLabel1))
                .addGap(70, 70, 70))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(warningLabel3)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectIMG)
                    .addComponent(flashPartitionButton)))
        );

        jTabbedPane1.addTab(parser.parse("partitionManager:flashPartitionTab"), jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formatPartitionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatPartitionsButtonActionPerformed
        if (jList1.getSelectedValuesList() == null || jList1.getSelectedValuesList().isEmpty()) {
            logger.log(Level.ERROR, "No partition was selected! Please select a partition and try again!");
            return;
        }
        
        if (serialNumber == null || serialNumber.equals("")) {
            logger.log(Level.ERROR, "No device was detected/Value was null! Please connect an Android device in Fastboot-mode to your computer!");
            return;
        }
        
        if (debug) {
            logger.log(Level.DEBUG, "Preparing to format ,device: " + serialNumber);
            logger.log(Level.DEBUG, "Looping through selection and formatting device partition(s)...");
        }
        
        FastbootController fbController = adbController.getFastbootController();
        
        for (Object partition : jList1.getSelectedValuesList()) {
            logger.log(Level.INFO, "Formatting partition " + partition + "...");
            try {
                fbController.executeFastbootCommand(serialNumber, new String[]{"format", (String) partition});
                logger.log(Level.INFO, "Successfully formatted partition " + partition + " on device " + serialNumber);
            } catch (IOException ex) {
                logger.log(Level.ERROR, "An error occurred while formatting device " + serialNumber + ": " + ex.toString() + "\n"
                        + "The error stack trace will be printed to the console. The loop will be broken...");
                ex.printStackTrace(System.err);
                break;
            }
        }
    }//GEN-LAST:event_formatPartitionsButtonActionPerformed

    private void erasePartitionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_erasePartitionsButtonActionPerformed
        if (jList2.getSelectedValuesList() == null || jList2.getSelectedValuesList().isEmpty()) {
            logger.log(Level.ERROR, "No partition was selected! Please select a partition and try again!");
            return;
        }
        
        if (serialNumber == null || serialNumber.equals("")) {
            logger.log(Level.ERROR, "No device was detected/Value was null! Please connect an Android device in Fastboot-mode to your computer!");
            return;
        }
        
        if (debug) {
            logger.log(Level.DEBUG, "Preparing to erase ,device: " + serialNumber);
            logger.log(Level.DEBUG, "Looping through selection and erase device partition(s)...");
        }
        
        FastbootController fbController = adbController.getFastbootController();
        
        for (Object partition : jList2.getSelectedValuesList()) {
            logger.log(Level.INFO, "Erasing partition " + partition + "...");
            try {
                fbController.executeFastbootCommand(serialNumber, new String[]{"erase", (String) partition});
                logger.log(Level.INFO, "Successfully erased partition " + partition + " on device " + serialNumber);
            } catch (IOException ex) {
                logger.log(Level.ERROR, "An error occurred while erasing device " + serialNumber + ": " + ex.toString() + "\n"
                        + "The error stack trace will be printed to the console. The loop will be broken...");
                ex.printStackTrace(System.err);
                break;
            }
        }
    }//GEN-LAST:event_erasePartitionsButtonActionPerformed

    private void selectIMGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectIMGActionPerformed
        JFileChooser imgChooser = new JFileChooser();
        imgChooser.setFileFilter(new IMGFilter());
        imgChooser.setDialogTitle(parser.parse("partitionManager:imgChooserTitle"));
        imgChooser.setApproveButtonText(parser.parse("partitionManager:imgChooserApproveButton"));
        imgChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        imgChooser.setMultiSelectionEnabled(false);
        int result = imgChooser.showOpenDialog(null);
        if (result == JOptionPane.OK_OPTION)
            jTextField1.setText(imgChooser.getSelectedFile().getAbsolutePath());
        else return;
        if (debug)
            logger.log(Level.DEBUG, "User selected " + jTextField1.getText() + " to flash to " + serialNumber);
    }//GEN-LAST:event_selectIMGActionPerformed

    private void flashPartitionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flashPartitionButtonActionPerformed
        if (jList3.getSelectedValuesList() == null || jList3.getSelectedValuesList().isEmpty()) {
            logger.log(Level.ERROR, "No partition was selected! Please select a partition and try again!");
            return;
        }
        
        if (serialNumber == null || serialNumber.equals("")) {
            logger.log(Level.ERROR, "No device was detected/Value was null! Please connect an Android device in Fastboot-mode to your computer and try again!");
            return;
        }
        
        FastbootController fbController = adbController.getFastbootController();
        
        try {
            if (cleanFlash)
                fbController.executeFastbootCommand(serialNumber, new String[]{"format", (String) jList3.getSelectedValue()});
            fbController.executeFastbootCommand(serialNumber, new String[]{"flash", (String) jList3.getSelectedValue(), jTextField1.getText()});
        } catch (IOException ex) {
            logger.log(Level.ERROR, "An error occurred while flashing " + jTextField1.getText() + "to " + serialNumber + "!: " + ex.toString() + "\n"
                    + "The error stack trace will be printed to the console...");
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_flashPartitionButtonActionPerformed

    private void jList3ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList3ValueChanged
        ListModel model = jList3.getModel();
        
        for (int i = 0; i < model.getSize(); i++)
            if ( ((String) model.getElementAt(i)).equals("*custom")) {
                jList3.clearSelection();
                String customPartition = JOptionPane.showInputDialog(null, parser.parse("partitionManager:customPartitionMsg"), parser.parse("partitionManager:customPartitionMsgTitle"), JOptionPane.QUESTION_MESSAGE);
                if (customPartition == null || customPartition.equals("")) return;
                DefaultListModel _model = new DefaultListModel();
                for (int j = 0; j < model.getSize(); j++)
                    if (!((String) model.getElementAt(j)).equals("*custom"))
                        _model.addElement(model.getElementAt(j));
                _model.addElement(customPartition);
                _model.addElement("*custom");
                jList3.setModel(_model);
                jList3.clearSelection();
                return;
            }
            
    }//GEN-LAST:event_jList3ValueChanged

    private class IMGFilter extends FileFilter {

        @Override
        public boolean accept(File f) {
            return f.isDirectory() || f.getAbsolutePath().toLowerCase().endsWith(".img");
        }

        @Override
        public String getDescription() {
            return parser.parse("partitionManager:imgFilter");
        }
        
    }
    
    private class PartitionCellRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            label.setIcon(new ImageIcon(this.getClass().getResource("/eu/m4gkbeatz/androidtoolkit/resources/fastboot/partition.png")));
            return label;
        }

    }
    
    public void setTab(int index) { jTabbedPane1.setSelectedIndex(index); }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton erasePartitionsButton;
    private javax.swing.JButton flashPartitionButton;
    private javax.swing.JButton formatPartitionsButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JList jList3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton selectIMG;
    private javax.swing.JLabel selectPartitionLabel;
    private javax.swing.JLabel selectPartitionLabel2;
    private javax.swing.JLabel warningLabel;
    private javax.swing.JLabel warningLabel2;
    private javax.swing.JLabel warningLabel3;
    // End of variables declaration//GEN-END:variables
}
