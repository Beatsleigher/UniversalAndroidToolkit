/*
 * Copyright (C) 2014 beatsleigher
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package eu.m4gkbeatz.androidtoolkit.logging;

import javax.swing.ImageIcon;
import java.io.*;
import java.util.Date;

/**
 *
 * @author beatsleigher
 */
public class Logger extends javax.swing.JFrame {
    
    public enum Level {
        DEBUG, INFO, ERROR, UPDATE
    }
    
    private File logFile = null;
    private BufferedWriter writer = null;
    private String usrDir = System.getProperty("user.home");

    /**
     * Creates new form Logger
     * @throws java.io.IOException
     */
    public Logger() throws IOException {
        initComponents();
        this.setIconImage(new ImageIcon(this.getClass().getResource("/eu/m4gkbeatz/androidtoolkit/resources/log-icon.png")).getImage());
        this.setTitle("Universal Android Toolkit Logger");
        logFile = new File(usrDir + "/.androidtoolkit/logs/log-uat-" + new Date().getTime() + ".uat.log");
        if (!logFile.exists()) {
            logFile.getParentFile().mkdirs();
            logFile.createNewFile();
        }
        writer = new BufferedWriter(new FileWriter(logFile));
    }
    
    public void log(Level level, String msg) {
        try {
            Date date = new Date();
            String log = "[" + level + "]::" + "[" + date.toGMTString() + "] - " + msg + "\n";
            jTextArea1.append(log);
            writer.write(log);
            writer.flush();
        } catch (IOException ex) {
            System.err.println("ERROR: Error while logging to file!");
            ex.printStackTrace(System.err);
        }
    }
    
    public void close() throws IOException {
        writer.close();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jTextArea1.setBackground(new java.awt.Color(0, 0, 0));
        jTextArea1.setColumns(20);
        jTextArea1.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
